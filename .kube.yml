apiVersion: v1
kind: Namespace
metadata:
  name: {{.namespace}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{.appname}}
  namespace: {{.namespace}}
spec:
  replicas: {{.replicas}}
  selector:
    matchLabels:
      app: {{.appname}}
  template:
    metadata:
      labels:
        app: {{.appname}}
    spec:
      containers:
        - name: {{.appname}}
          image: gcr.io/movelab-registry/ceranalytics-rserver:{{.build}}
          resources:
            requests:
              memory: "256Mi"
              cpu: "500m"
            limits:
              memory: "512Mi"
              cpu: "1000m"
          env:
            - name: "COMMIT"
              value: {{.COMMIT}}
            - name: "PROFILE"
              value: {{.profile}}
            - name: "NODE_ENV"
              value: {{.profile}}
            - name: "BUILD_NUMBER"
              value: build_{{.BUILD_NUMBER}}
            - name: "CONSUL_HTTP_ADDR"
              value: {{.consul_http_addr}}
            - name: "CONSUL_HTTP_TOKEN"
              value: {{.consul_http_token}}
            - name: "CONSUL_HTTP_SSL"
              value: "true"
            - name: "CONSUL_HTTP_SSL_VERIFY"
              value: "false"
          volumeMounts:
          - mountPath: "/workspace/models"
            name: {{.appname}}-storage
      volumes:
        - name: {{.appname}}-storage
          persistentVolumeClaim:
            claimName: nfs-{{.appname}}
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: horizontal-auto-scaler
  namespace: {{.namespace}}
spec:
  scaleTargetRef:
    kind: Deployment
    name: {{.appname}}
    apiVersion: apps/v1beta1
  minReplicas: {{.replicas}}
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
---
apiVersion: v1
kind: Service
metadata:
  name: {{.appname}}-service
  namespace: {{.namespace}}
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/path: '/metrics'
spec:
  type: NodePort
  ports:
  - name: http
    protocol: TCP
    port: 8000
  selector:
    app: {{.appname}}
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{.appname}}-update-job
  namespace: {{.namespace}}
spec:
  schedule: "0 4 * * *" # Every hour
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: {{.appname}}-fit-cuaja
            image: byrnedo/alpine-curl
            args:
              - "-i"
              - "-X"
              - "GET"
              - "http://{{.appname}}-service:8000/fit_models/models/cuaja"
          restartPolicy: OnFailure
# NFS Disk
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{.appname}}-nfs-server
  namespace: {{.namespace}}
spec:
  replicas: 1
  selector:
    matchLabels:
      role: {{.appname}}-nfs-server
  template:
    metadata:
      labels:
        role: {{.appname}}-nfs-server
    spec:
      containers:
        - name: {{.appname}}-nfs-server
          image: gcr.io/google_containers/volume-nfs:0.8
          ports:
            - name: nfs
              containerPort: 2049
            - name: mountd
              containerPort: 20048
            - name: rpcbind
              containerPort: 111
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /exports
              name: {{.appname}}-nfs-pvc
      volumes:
        - name: {{.appname}}-nfs-pvc
          persistentVolumeClaim:
            claimName: {{.appname}}-disk
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{.appname}}-disk
  namespace: {{.namespace}}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: Service
metadata:
  name: {{.appname}}-nfs-server
  namespace: {{.namespace}}
spec:
  ports:
    - name: nfs
      port: 2049
    - name: mountd
      port: 20048
    - name: rpcbind
      port: 111
  selector:
    role: {{.appname}}-nfs-server
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nfs-{{.appname}}
  namespace: {{.namespace}}
spec:
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteMany
  nfs:
    server: {{.appname}}-nfs-server.{{.namespace}}.svc.cluster.local
    path: "/"
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: nfs-{{.appname}}
  namespace: {{.namespace}}
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: ""
  resources:
    requests:
      storage: 2Gi
